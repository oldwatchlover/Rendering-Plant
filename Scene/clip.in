
##
## simple example showing polygon clipping
## 

#define XRES	1280
#define YRES	960

##
## generic flags are renderer-dependent... this flag is interpreted
## by "paint" and "scan" to draw red outlines on all triangles
## (especially useful for debugging polygon clipping code...)
##
genericflags(RENDER02);

clear(0.5294, 0.8078, 0.9216, 1.0);

output("clip.bmp", XRES, YRES);

camera(0, 0, 500, 0, 0, 0, 0, 1, 0, 20.0, XRES/YRES);

light(0.0, 0.0, -1000.0, 1.0, 1.0, 1.0);

texture("Texture/checker.bmp", WRAP FILT MODULATE, 2.0, 3.0, 0.0, 0.0);

## uncomment the following line to enable texture on the triangle: 
objflags(TEXTURE);

objflags(CULL_BACK VERTSHADE);

material(color, 1.0, 1.0, 1.0, 1.0);
material(texname, "Texture/checker.bmp");

identity(MTX_MODEL);
translate(0.0, 0.0, 0.0);
rotate(0.0, 0.0, 0.0, 1.0);
rotate(0.0, 0.0, 1.0, 0.0);
rotate(0.0, 1.0, 0.0, 0.0);
scale(1.0, 1.0, 1.0);

vertex[3] {
  {(-80.0 - 80.0), (-60.0 + 40.0),   0.0, 1.0,   0,   0, 1.0,  0.0, 0.0},
  { (80.0 - 80.0), (-60.0 + 40.0),   0.0,   0, 1.0,   0, 1.0,  1.0, 0.0},
  {  (0.0 - 80.0),  (60.0 + 40.0),   0.0,   0,   0, 1.0, 1.0,  0.5, 0.5},
};

trilist[1] {
	{ 0, 1, 2 },
};

## something out of the way to test trivial rejection in the clipper

identity(MTX_MODEL);
translate(0.0, 0.0, 0.0);
rotate(0.0, 0.0, 0.0, 1000.0);
rotate(0.0, 0.0, 1.0, 0.0);
rotate(0.0, 1.0, 0.0, 0.0);
scale(1.0, 1.0, 1.0);

vertex[3] {
  {( 2000.0 - 80.0), (-60.0 + 40.0),   0.0, 1.0,   0,   0, 1.0,  0.0, 0.0},
  { (2000.0 - 80.0), (-60.0 + 40.0),   0.0,   0, 1.0,   0, 1.0,  1.0, 0.0},
  { (2000.0 - 80.0),  (60.0 + 40.0),   0.0,   0,   0, 1.0, 1.0,  0.5, 0.5},
};

trilist[1] {
	{ 0, 1, 2 },
};


