
#define XRES	1920
#define YRES	1080

        /*
         * scene flags affect the entire scene... you cannot turn flags on or off 
         * between objects
         */
        sceneflags(VERBOSE ZBUFFER);

	## uncomment these to enable fog and test fog
        ##sceneflags(FOG);
        ##fog(1000.0, 6000.0, 1.0, 1.0, 1.0, 1.0);

	/*
         * output image file and resolution, with a pleasing blue background
         */
        output("simple.bmp", XRES, YRES);
	clear(0.5294, 0.8078, 0.9216, 1.0); # r,g,b,a (asm lang style comments ok)

	/*
	 * camera to render the scene. Paramters are:
 	 *          position         looking at      up      fov    aspect ratio
         *      x     y     z       x    y    z    x  y  z  degrees   x/y 
         */      
	camera(0.0, 200.0, 2500.0, 0.0, 10.0, 0.0, 0, 1, 0,  20.0, XRES/YRES);
	depthrange(100.0, 10000.0);

	/*
	 * light is position (x,y,z) and color (r,g,b)
	 */
        light(-2000.0, 1000.0, 3000.0, 1.0, 1.0, 1.0);
        light(0.0, 1000.0, 0.0, 1.0, 1.0, 1.0);

	/* clear all object flags: */
        objflags(~ALLFLAGS);
        objflags(TEXTURE VERTSHADE LIGHTING CULL_BACK);

	/* load texture and set material parameters */
        texture("Texture/checker.bmp", WRAP MODULATE, 4.0, 4.0, 0.0, 0.0);
        material(color,    1.0, 1.0, 1.0, 1.0);
        material(ambient,  0.2, 0.2, 0.2, 1.0);
        material(diffuse,  0.6, 0.6, 0.6, 1.0);
        material(specular, 0.1, 0.1, 0.1, 1.0);
        material(shiny,    1.0);
	material(texname,  "Texture/checker.bmp");

        /* see OpenGl docs for details about the importance of order when
         * combining transformations to create the model matrix.
	 *
	 * you should scale, then rotate, then translate
 	 *
 	 * since the matrix stack multiplies matrices in reverse order, you 
         * should always specify them in this order in the scene file:
	 */
        identity(MTX_MODEL);		# start with identity modeling matrix
        translate(0.0, 0.0, 0.0);	# translate x,y,z
        rotate(0.0, 0.0, 1.0, 0.0);	# rotate r degrees around vector x,y,z
        scale(4.0, 1.0, 2.0);		# scale x,y,z

	/*
	 * a direct way to describe geometry is to provide the vertex list
	 * and triangle list.
	 */
        vertex[4] {
        ## |--model space coord--||----- color ------||- tex coord -|
        ## | x        y       z  ||  r    g    b   a ||  s     t    |
          {-800.0, -200.0, -800.0,   0, 1.0,   0, 1.0, 0.000, 0.000},
          { 800.0, -200.0,  500.0,   0,   0, 1.0, 1.0, 1.000, 1.000},
          { 800.0, -200.0, -800.0,   0,   0,   0, 1.0, 1.000, 0.000},
          {-800.0, -200.0,  500.0, 1.0,   0,   0, 1.0, 0.000, 1.000}
        };

        trilist[2] {
        ## index into vertex array above describes the triangles
            { 0, 1, 2 },
            { 0, 3, 1 },
        };

        objflags(~ALLFLAGS);
        objflags(LIGHTING);

	/* transparent ball at center of screen: */
	identity(MTX_MODEL);
        material(color, 1.0, 1.0, 1.0, 1.0);
        material(ambient, 0.2, 0.2, 0.2, 0.1);
        material(diffuse, 0.6, 0.6, 0.6, 0.1);
        material(specular, 1.0, 1.0, 1.0, 0.1);
        material(shiny, 180.0);
        material(reflection, 0.8);
        material(refraction, 1.4);
        sphere(0.0, -100.0, 0.0, 100.0);

	/* blue ball on right: */
	identity(MTX_MODEL);
        material(color, 0.0, 0.0, 1.0, 1.0);
        material(ambient, 0.0, 0.0, 0.2, 1.0);
        material(diffuse, 0.0, 0.0, 0.6, 1.0);
        material(specular, 1.0, 1.0, 1.0, 1.0);
        material(shiny, 180.0);
        material(reflection, 0.0);
        material(refraction, 0.0);
        sphere(400.0, 100.0, -200.0, 200.0);

	/* reflective ball on left: */
	identity(MTX_MODEL);
        material(color, 1.0, 1.0, 1.0, 1.0);
        material(ambient, 0.2, 0.2, 0.2, 1.0);
        material(diffuse, 0.6, 0.6, 0.6, 1.0);
        material(specular, 1.0, 1.0, 1.0, 1.0);
        material(shiny, 200.0);
        material(reflection, 0.8);
        material(refraction, 0.0);
        sphere(-450.0, 200.0, -450.0, 250.0);

	/* red ball in the distance: */
	identity(MTX_MODEL);
        material(color, 1.0, 0.0, 0.0, 1.0);
        material(ambient, 0.2, 0.0, 0.0, 1.0);
        material(diffuse, 0.6, 0.0, 0.0, 1.0);
        material(specular, 1.0, 1.0, 1.0, 1.0);
        material(shiny, 120.0);
        material(reflection, 0.0);
        material(refraction, 0.0);
        sphere(200.0, 100.0, -2500.0, 200.0);

        objflags(~ALLFLAGS);
	objflags(FLATSHADE LIGHTING CULL_BACK);

	/* a tall yellow box */
	identity(MTX_MODEL);
	translate(-170.0, -200.0, -200.0);
	rotate(45.0, 0.0, 1.0, 0.0);
	scale(100.0, 300.0, 100.0);

        material(color, 1.0, 1.0, 0.0, 1.0);
	material(ambient, 0.2, 0.2, 0.0, 1.0);
	material(diffuse, 0.7, 0.7, 0.0, 1.0);
	material(specular, 0.3, 0.3, 0.3, 1.0);
	material(shiny, 20.0);
        material(reflection, 0.0);
        material(refraction, 0.0);

	/*
	 * geometry can also be loaded from a Wavefront .obj file:
	 */
        loadobj("obj/cube.obj");


